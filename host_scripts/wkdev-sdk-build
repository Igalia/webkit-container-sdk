#!/usr/bin/bash

application_path=${0}
application_name=$(basename ${application_path})
application_directory=$(cd "$(dirname "${application_path:-$PWD}")" 2>/dev/null 1>&2 && pwd)
printf "${application_name}: Build wkdev-sdk image.\n"

verbose=1

# Prevent to run this script from the container
if [ -f /run/.containerenv ]; then
    printf "\nThe script '${application_name}' is not intended to run from within the container.\n"
    exit 1
fi

# Verify pre-requisite: podman needs to be installed.
if ! command -v podman > /dev/null; then
    printf "\nCannot find podman executable.\n"
    exit 1
fi

# Bash scripting recommendations
set -o errexit # Exit upon command failure
set -o nounset # Warn about unset variables

printf "\n-> Building 'ubuntu_package_proxy' auxiliary image...\n"
auxiliary_directory=$(readlink --canonicalize-existing "${application_directory}/../auxiliary")
binary_packages_directory=$(readlink --canonicalize-existing "${application_directory}/../packages/binaries")

if [ ${verbose} -eq 1 ]; then
    printf "   Build log:\n"
    ${auxiliary_directory}/ubuntu_package_proxy/build-image.sh
else
    ${auxiliary_directory}/ubuntu_package_proxy/build-image.sh &>/dev/null
fi

printf "\n-> Building 'ubuntu_package_builder' auxiliary image...\n"

if [ ${verbose} -eq 1 ]; then
    printf "   Build log:\n"
    ${auxiliary_directory}/ubuntu_package_builder/build-image.sh
else
    ${auxiliary_directory}/ubuntu_package_builder/build-image.sh &>/dev/null
fi

pushd "${application_directory}"/.. &>/dev/null
printf "\n-> Building 'wkdev-sdk' image...\n"

if [ ${verbose} -eq 1 ]; then
    printf "   Build log:\n"
    podman build --jobs $(nproc --ignore=2) --tag docker.io/nikolaszimmermann/wkdev-sdk:latest ${@} .
else
    podman build --jobs $(nproc --ignore=2) --tag docker.io/nikolaszimmermann/wkdev-sdk:latest ${@} . &>/dev/null
fi

popd &>/dev/null
printf "\n-> Finished building images!\n"
