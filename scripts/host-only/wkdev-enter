#!/usr/bin/env bash

[ -f "${WKDEV_SDK}/.wkdev-sdk-root" ] && source "${WKDEV_SDK}/utilities/application.sh" || { echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."; exit 1; }
init_application "${0}" "Launch a command or spawn an interactive shell in a container built by 'wkdev-create'" host-only

# Source utility script fragments
source "${WKDEV_SDK}/utilities/host-setup-tasks.sh"
source "${WKDEV_SDK}/utilities/podman.sh"

argsparse_use_option debug           "Enable debug logging for podman (useful to debug container issues)"
argsparse_use_option trace           "Enable 'xtrace' mode for this script"
argsparse_use_option =verbose        "Increase verbosity of this script"

argsparse_use_option =root           "Login as root user in container (mapped to $(id --user --name) on host)"
argsparse_use_option =exec           "Treat all remaining non-option arguments (or everything after the '--' character sequence) as command to execute in the container instead of spawning a shell"
argsparse_use_option =name:          "Name of container" default:wkdev

argsparse_use_option max-retries:    "Maximum number of <wait>+<try-to-enter> cycles" type:uint default:10
argsparse_use_option sleep-duration: "Amount of seconds to sleep before attempting to enter the container (during first-time container run)" type:uint default:10

argsparse_usage_description="$(cat <<EOF
<< Purpose >>

    Spawns an interactive shell in a running container, or executes a command in the container.

    When a 'wkdev-sdk' container is entered the first time, it has to be adapted according to
    the needs of the current host user that enters it. For example the same shell that the
    user is currently using to launch these scripts is installed in the container, if not
    present. The first-time initialiation takes a while, and therefore entering the container
    interactively is delayed. ${application_name} sleeps for a while and retries a configurable
    amount of times before it gives up trying to enter the container. The podman logs for the
    container allow to check the status and/or debug possible issues with the initialization
    procedure.

<< Examples >>

    $ ${application_name} --name <container-name>
    $ ${application_name} --root --name <container-name>
    $ ${application_name} --exec --name <container-name> -- uptime
EOF
)"

process_command_line_arguments() {

    argsparse_allow_no_argument "true"
    argsparse_parse_options "${@}"
    argsparse_is_option_set "trace" && set -o xtrace

    container_name="${program_options["name"]}"
    max_retries="${program_options["max-retries"]}"
    sleep_duration_in_seconds="${program_options["sleep-duration"]}"
}

build_podman_arguments() {

    local -n generic_arguments=${1}

    # On the host, the podman user socket can be used as well:
    # '--remote' routes podman communication through the socket,
    # which is supposed to deliver a CLI usage with less latency.
    is_podman_user_socket_available && generic_arguments+=("--remote")

    argsparse_is_option_set "debug" && generic_arguments+=("--log-level debug")
}

ensure_container_is_running() {

    # Check if container is running, if not - start or create it.
    container_status="$(get_podman_container_status "${container_name}")"
    argsparse_is_option_set "debug" && echo "## Status for '${container_name}' container: '${container_status}'"

    [ "${container_status}" == "unknown" ] && _abort_ "Cannot find container '${container_name}'"
    [ "${container_status}" == "running" ] || {
        echo "";
        echo "-> Container '${container_name}' is not yet running. Starting it before attempting to enter...";
        host_setup_prerun_tasks
        run_podman_silent start "${container_name}"
    }
}

# Main functionality
run() {

    process_command_line_arguments "${@}"

    # 1) Ensure container is running
    ensure_container_is_running

    # 2) Check if container is initialized (running is not sufficient).
    local podman_arguments=()
    build_podman_arguments podman_arguments

    run_podman_silent ${podman_arguments[@]} exec "${container_name}" test -f "$(get_init_done_file)" || {
        echo ""
        echo "-> Wait for '${container_name}' to finish initialization..."

        local retries=0
        while : ; do
            run_podman_silent ${podman_arguments[@]} exec "${container_name}" test -f "$(get_init_done_file)" && break

            retries=$((retries+1))
            [ ${retries} -eq 10 ] && _abort_ "Container does not start, please investigate"

            echo "   Retry ${retries}/${max_retries} in ${sleep_duration_in_seconds} seconds..."
            sleep ${sleep_duration_in_seconds}
        done;
    }

    # Prepare to call "podman exec".
    if argsparse_is_option_set "verbose"; then
        echo ""

        if argsparse_is_option_set "exec"; then
            echo "-> Spawn non-interactive shell session in '${container_name}' container ('--exec' mode enabled)..."
        else
            echo "-> Spawn interactive shell session in '${container_name}' container..."
        fi
    fi

    # Request interactive session with pseudo-tty allocation.
    local podman_exec_arguments=("--interactive" "--tty")

    # Choose root or regular user.
    if argsparse_is_option_set "root"; then
        podman_exec_arguments+=("--user" "0:0")
    else
        podman_exec_arguments+=("--user" "$(id --user --real):$(id --group --real)")
    fi

    if argsparse_is_option_set "exec"; then
        podman_exec_arguments+=("${container_name}" "${program_params[@]}")
    else
        podman_exec_arguments+=("${container_name}" "/usr/bin/env" "USER=$(id --user --name)" "${SHELL}" "--login")
    fi

    run_podman ${podman_arguments[@]} exec ${podman_exec_arguments[@]}
}

run "${@}"
