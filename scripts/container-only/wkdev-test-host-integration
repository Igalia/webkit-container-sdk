#!/usr/bin/env bash
# Copyright 2024 Igalia S.L.
# SPDX-License: MIT

[ -f "${WKDEV_SDK}/.wkdev-sdk-root" ] && source "${WKDEV_SDK}/utilities/application.sh" || { echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."; exit 1; }
init_application "${0}" "Test host system integration" container-only

argsparse_use_option trace "Enable 'xtrace' mode for this script"

argsparse_usage_description="$(cat <<EOF
<< Purpose >>

    Verifies that the container <-> host system integration behaves as expected.

    This script exercises systemd / dbus intgration, X11/Wayland integration, desktop notifications,
    PulseAudio, dconf (via gtk4-demo) and runs glxgears, the glmark2 benchmark, and Epiphany. Each test
    denotes an expectation, whether the tested feature is supposed to work in the container or if
    access is forbidden.

<< Examples >>

    $ ${application_name} --trace
EOF
)"

process_command_line_arguments() {

    # Allow empty command line
    argsparse_allow_no_argument yes

    argsparse_parse_options "${@}"
    argsparse_is_option_set "trace" && set -o xtrace
}

# Runs a single test.
run_test() {

    local description="${1}"
    local command="${2}"
    shift 2

    read -p "Press any key to continue.."

    _log_ ""
    _log_ "-> ${description}:"
    "${command}" "${@}"
}

# Main functionality
run() {

    process_command_line_arguments "${@}"

    _log_ "-> Install required packages:"
    sudo apt-get install --assume-yes epiphany-browser gtk-4-examples glmark2 glmark2-drm glmark2-wayland libnotify-bin mesa-utils x11-apps

    run_test "Ping allowed in rootless container: (expected to work)" \
        ping -c 4 wpewebkit.org

    run_test "Access to system dbus: (expected to work)" \
        busctl --no-pager list

    run_test "Access to session dbus: (expected to work)" \
        busctl --no-pager --user list

    run_test "Access to systemd session: (expected to fail)" \
        systemctl --no-pager status

    run_test "Accesus to systemd user session: (expected to work)" \
        systemctl --no-pager --user status

    run_test "Access to system journal: (expected to work)" \
        journalctl --no-pager --boot=0 --lines=10

    run_test "Access to user journal: (expected to work)" \
        journalctl --no-pager --user --boot=0 --lines=10

    run_test "Test Bubblewrap: (should work if host supports unprivileged user namespaces)" \
        bwrap --ro-bind / / --dev-bind /dev /dev --unshare-all echo 'Success'

    # TODO: We would need to setup a subordinate GID/UID mapping that is well embedded
    # in the constraints given bythe host subordinate GID/UID mapping. If we ever want
    # that, investigate. The current approach of steering the host podman from within
    # the container is reliable, and avoids the problem alltogether, at the expense
    # of opening another portal to the host system which exposes many host system
    # details that one usually wants to hide from a potentially malicious container.
    # In our case that for sure does not apply -- it is a developer SDK.
    run_test "Launching podman in podman container: (not expected to work on every host yet)" \
        podman info

    run_test "Launching podman-host in podman container: (expected to work)" \
        podman-host info

    message="Hello from wkdev-sdk!"
    run_test "Desktop notifications should appear: (expected to work)" \
        notify-send "${message}"

    run_test "Run X11 application, xeyes: (should work if X11/Xwayland is activate on host)" \
        xeyes

    run_test "Run Gtk/Wayland application, gtk4-demo: (should work if Wayland is activate on host)" \
        gtk4-demo

    run_test "Run glxgears OpenGL application: (should work if it works on the host)" \
        glxgears -info

    run_test "Run glmark2 benchmark: (should work if it works on the host)" \
        glmark2

    run_test "Test PulseAudio: (should work if it works on the host)" \
        pactl info

    # Our self-compiled GStreamer interferes with the system-provided one, avoid that for testing epiphany.
    unset GST_PLUGIN_PATH_1_0
    unset GST_PLUGIN_SCANNER
    unset LD_LIBRARY_PATH

    run_test "Test Epiphany browser: (try youtube.com, CSS 3D demos, WebGL, etc.)" \
        epiphany
}

run "${@}"
