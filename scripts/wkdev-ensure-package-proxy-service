#!/usr/bin/bash

[ -f "${WKDEV_SDK}/.wkdev-sdk-root" ] && source "${WKDEV_SDK}/utilities/application.sh" || { echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."; exit 1; }
init_application "${0}" "Ensures that the '$(get_package_proxy_image_name)' container is running." host-and-container

# Source utility script fragments
source "${WKDEV_SDK}/utilities/podman.sh"

argsparse_use_option debug        "Enable debug mode for this script"
argsparse_use_option trace        "Enable 'xtrace' mode for this script"
argsparse_use_option =verbose     "Increase verbosity of this script"

argsparse_usage_description="$(cat <<EOF
<< Purpose >>

    This helper utility ensures that a '"$(get_package_proxy_image_name)"' container is running, serving as
    local proxy server for APT repositories, auto-caching .deb packages to avoid downloading
    the same package twice.
EOF
)"

process_command_line_arguments() {

    # Allow empty command line
    argsparse_allow_no_argument yes

    argsparse_parse_options "${@}"
    argsparse_is_option_set "trace" && set -o xtrace
}

# Main functionality
run() {

    process_command_line_arguments "${@}"

    local proxy_container_name="$(get_package_proxy_image_name)"
    # Check if proxy server container is running, if not - start or create it.
    last_container_status="unknown"
    check_podman_container_status "${proxy_container_name}"
    argsparse_is_option_set "debug" && echo "## Status for '${proxy_container_name}' container: '${last_container_status}'"

    if [ "${last_container_status}" == "unknown" ]; then
        # If the container isn't known, create it and run it - in one shot.
        argsparse_is_option_set "verbose" && echo "-> Creating & starting local proxy server to cache .deb packages as separated '${proxy_container_name}' container..."
        run_podman_silent run --pull newer --detach --tty --publish 127.0.0.1:8765:8765 --volume "${proxy_container_name}-data":/data \
                              --name "${proxy_container_name}" "$(get_package_proxy_qualified_name_and_tag)"
    elif [ "${last_container_status}" != "running" ]; then
        # If the container exists and isn't running, start it.
        argsparse_is_option_set "verbose" && echo "-> Starting local proxy server to cache .deb packages as separated '${proxy_container_name}' container..."
        run_podman_silent start "${proxy_container_name}"
    else
        argsparse_is_option_set "verbose" && echo "-> Local proxy server '${proxy_container_name}' already running, no need to spawn a new instance."
        exit 0
    fi

    # Check if startup was successful.
    last_container_status="unknown"
    check_podman_container_status "${proxy_container_name}"
    if [ "${last_container_status}" == "running" ]; then
        argsparse_is_option_set "verbose" && { echo ""; echo "-> Local proxy server '${proxy_container_name}' started successfully."; }
        exit 0
    fi

    _abort_ "Proxy container status: '${last_container_status}'. Cannot start '${proxy_container_name}' container - please check logs using 'podman logs ${proxy_container_name}'."
}

run "${@}"
