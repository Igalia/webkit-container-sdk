#!/usr/bin/env bash
# Copyright 2024 Igalia S.L.
# SPDX-License: MIT

[ -f "${WKDEV_SDK}/.wkdev-sdk-root" ] && source "${WKDEV_SDK}/utilities/application.sh" || { echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."; exit 1; }
init_application "${0}" "Build one of the container images that form the SDK" host-only

# Source utility script fragments
source "${WKDEV_SDK}/utilities/podman.sh"
source "${WKDEV_SDK}/utilities/resources.sh"
source "${WKDEV_SDK}/utilities/timer.sh"

# nproc is used to determine the number of CPU cores
verify_executables_exist nproc

argsparse_use_option debug        "Enable debug logging for podman (useful to debug container issues)"
argsparse_use_option trace        "Enable 'xtrace' mode for this script"
argsparse_use_option =verbose     "Increase verbosity of this script"

argsparse_use_option =name:       "Name of container image" mandatory default:wkdev-sdk
argsparse_use_option =env:        "Environment variable as string array, e.g. -e KEY=value,FOO=bar" cumulative
argsparse_use_option =mode:       "Operation mode: 'build', 'deploy', or 'export'" mandatory
argsparse_use_option idle-cores:  "Number of CPU cores to leave idle, when building the image" type:uint default:2
argsparse_use_option =tag:        "Tag to use for created image." default:$(get_default_container_tag)
argsparse_use_option =arch:       "Container architecture. When building images, we also append this arch to the tag name."
argsparse_use_option multiarch    "Assemble all available images of the form tag_ARCH into one multiarch image."

argsparse_usage_description="$(cat <<EOF
<< Purpose >>

    Builds one of the container images that form the SDK.

<< Examples >>

    $ ${application_name} --name wkdev-sdk --mode build
    $ ${application_name} --name wkdev-sdk --mode deploy
EOF
)"

process_command_line_arguments() {

    argsparse_parse_options "${@}"
    argsparse_is_option_set "trace" && set -o xtrace

    container_image_name="${program_options["name"]}"
    container_tag="${program_options["tag"]}"
    idle_cores=${program_options["idle-cores"]}

    operation_mode="${program_options["mode"]}"
    [ "${operation_mode}" != 'build' ] && [ "${operation_mode}" != 'deploy' ] && [ "${operation_mode}" != 'export' ] && _abort_ "Unknown operation mode: '${operation_mode}' (valid choices are 'build', 'deploy', or 'export')"
}

get_tag_for_build() { echo "$(get_qualified_name "${container_image_name}"):${container_tag}"; }
get_number_of_cores_for_build() { nproc --ignore=${idle_cores}; }

build_image() {

    tag="$(get_tag_for_build)"

    if argsparse_is_option_set "arch"; then
        container_arch="${program_options["arch"]}"
        echo "Overriding container architecture: ${container_arch}"
        podman_argument+=("--arch=${container_arch}")

        tag="${tag}_${container_arch}"
    fi

    _log_ ""
    _log_ "-> Building container image '${container_image_name}' using tag '${tag}'..."
    _log_ ""

    pushd "$(get_image_directory_by_name "${container_image_name}")" &>/dev/null
    timer_start

    local podman_argument=("--jobs" "$(get_number_of_cores_for_build)")
    podman_argument+=("--tag" "${tag}")

    for environment_variable in "${cumulated_values_env[@]}"
    do
        podman_argument+=("--env" "${environment_variable}")
    done

    run_podman_silent_unless_verbose build ${podman_argument[@]} . || _abort_ "Container image build failed"
    timer_stop
    popd &>/dev/null
}

deploy_image() {

    _log_ ""
    _log_ "-> Deploying container image '${container_image_name}' to registry '$(get_default_container_registry)'..."
    _log_ ""

    local image_directory="$(get_image_directory_by_name "${container_image_name}")"
    pushd "${image_directory}" &>/dev/null || _abort_ "Switching to directory '${image_directory}' failed"

    if argsparse_is_option_set "multiarch"; then
        image=$(get_qualified_name "${container_image_name}")
        target_tag="${container_tag}"
        image_qualified="$(get_tag_for_build)"
        echo "Building multiarch image for ${image_qualified}"
        input_tags="$(podman image list "${image}" --format "{{.Tag}}" | grep "${target_tag}_")"
        run_podman_silent_unless_verbose rmi --ignore "${image_qualified}" || _abort_ "Deleting existing manifest failed"
        run_podman_silent_unless_verbose manifest create "${image_qualified}" || _abort_ "Creating manifest failed"
        for input_tag in "${input_tags[@]}"
        do
            echo "Adding ${image}:${input_tag} to ${image_qualified}"
            run_podman_silent_unless_verbose manifest add "${image_qualified}" "containers-storage:${image}:${input_tag}" || _abort_ "Adding to manifest failed"
        done
    fi

    run_podman_silent_unless_verbose push "$(get_tag_for_build)" || _abort_ "Pushing to registry failed"
    popd &>/dev/null
}

export_image() {

    _log_ ""
    _log_ "-> Exporting container image '${container_image_name}' to file ${container_image_name}.tar..."
    _log_ ""

    if argsparse_is_option_set "arch"; then
        output_file="${container_image_name}-${program_options["arch"]}.tar"
        tag="$(get_tag_for_build)_${program_options["arch"]}"
    else
        output_file="${container_image_name}.tar"
        tag="$(get_tag_for_build)"
    fi

    run_podman_silent_unless_verbose save --format=oci-archive -o ${output_file} ${tag}
}

# Main functionality
run() {

    process_command_line_arguments "${@}"

    [ "${operation_mode}" = "build" ] && build_image
    [ "${operation_mode}" = "deploy" ] && deploy_image
    [ "${operation_mode}" = "export" ] && export_image

    _log_ ""
    _log_ "-> Finished!"
}

run "${@}"
