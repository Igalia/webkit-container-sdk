#!/usr/bin/env bash
# Copyright 2024 Igalia S.L.
# SPDX-License: MIT

if [ -f "${WKDEV_SDK}/.wkdev-sdk-root" ]; then
    source "${WKDEV_SDK}/utilities/application.sh"
else
    echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."
    exit 1
fi
source "${WKDEV_SDK}/utilities/prerequisites.sh"

init_application "${0}" "Configures Visual Studio Code." container-only

verify_executables_exist curl

argsparse_allow_no_argument true
argsparse_use_option "=yes" "Assume yes for all prompts."
argsparse_use_option "no-extensions" "Don't install extensions."

install_vscode() {

    _log_ ""
    _log_ "Installing Visual Studio Code..."
    _log_ ""

    if which code > /dev/null; then
        _log_ "Visual Studio Code is already installed."
        return
    fi

    local download_url='https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'

    if [ "$(uname -m)" = 'aarch64' ]; then
        download_url='https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-arm64'
    fi

    if ! curl --silent --fail --location "${download_url}" -o /tmp/code.deb; then
        _log_ "Failed to download Visual Studio Code."
        exit 1
    fi

    if ! sudo apt install /tmp/code.deb; then
        _log_ "Failed to install Visual Studio Code."
        rm /tmp/code.deb
        exit 1
    fi

    rm /tmp/code.deb
    _log_ ""
    _log_ "Visual Studio Code has been installed."
}

install_extension() {

    local extension_name="${1}"
    local description="${2}"
    local ask="${3:-false}"
    local response
    local installed_extensions

    readarray installed_extensions < <(code --list-extensions)

    if [[ "${installed_extensions[*]}" =~ "${extension_name}" ]]; then
        _log_ "VSCode extension already installed: ${extension_name}"
        return
    fi

    if [ "${ask}" = true ] && ! argsparse_is_option_set "yes"; then
        read -r -p "Install VSCode extension: ${extension_name} (${description})? [Y/n] " response
        if [[ "$response" =~ ^([nN][oO]|[nN])$ ]]; then
            return
        fi
    else
        _log_ "Installing VSCode extension: ${extension_name} (${description})..."
    fi

    if ! code --install-extension "${extension_name}" &>/dev/null; then
        _log_ "Failed to install VSCode extension: ${extension_name}"
        exit 1
    fi

    _log_ "Installed"
    _log_ ""
}

install_extensions() {

    _log_ ""
    _log_ "Installing extensions..."
    _log_ ""
    install_extension ms-vscode.cmake-tools "CMake support"
    install_extension llvm-vs-code-extensions.vscode-clangd "C/C++ support"
    install_extension vadimcn.vscode-lldb "C/C++ debugging" true
    install_extension mads-hartmann.bash-ide-vscode "BASH support" true
    install_extension ms-python.python "Python support" true
}

run() {

    argsparse_parse_options "${@}"

    install_vscode

    if ! argsparse_is_option_set "no-extensions"; then
        install_extensions
    fi
}

run "${@}"
