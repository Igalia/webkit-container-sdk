#!/usr/bin/env bash

source "${WKDEV_SDK}/utilities/application.sh" || { echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."; exit 1; }
init_application "${0}" "" container-only

argsparse_allow_no_argument true
argsparse_use_option trace        "Enable 'xtrace' mode for this script"

argsparse_usage_description="$(cat <<EOF
<< Purpose >>

    ${application_name} is ran on enter for every wkdev-sdk container.

    It takes information from your host environment and ensures that the container
    contains all host state such as the WAYLAND_DISPLAY in use.

    NOTE: You do NOT need to call this script manually, it is automatically used during container startup.
EOF
)"

process_command_line_arguments() {

    argsparse_parse_options "${@}"
    argsparse_is_option_set "trace" && set -o xtrace
}

try_mount_host_wayland() {
    local host_wayland_socket="/host/run/${WAYLAND_DISPLAY}"
    local container_wayland_socket="${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}"

    if [ -L "${container_wayland_socket}" ]; then
        # Silently succeed.
        return
    elif [ -S "${host_wayland_socket}" ]; then
        echo ""
        echo "-> Mounting host Wayland socket (${WAYLAND_DISPLAY})."
        ln -s "${host_wayland_socket}" "${container_wayland_socket}"
    else
        echo ""
        echo "-> Skipping host Wayland socket (${WAYLAND_DISPLAY}) - not found."
    fi

    if [[ ! -f "${container_wayland_socket}.lock" &&  -f "${host_wayland_socket}.lock" ]]; then
        ln -s "${host_wayland_socket}.lock" "${container_wayland_socket}.lock"
    fi
}

try_mount_host_pipewire() {

    local host_pipewired_socket="/host/run/${PIPEWIRE_REMOTE}"
    local container_pipewire_socket="${XDG_RUNTIME_DIR}/${PIPEWIRE_REMOTE}"

    if [ -L "${container_pipewire_socket}" ]; then
        # Silently succeed.
        return
    elif [ -S "${host_pipewired_socket}" ]; then
        echo ""
        echo "-> Mounting host Pipewire socket (${PIPEWIRE_REMOTE})."
        ln -s "${host_pipewired_socket}" "${container_pipewire_socket}"
    else
        echo ""
        echo "-> Skipping host Pipewire socket (${PIPEWIRE_REMOTE}) - not found."
    fi

    if [[ ! -f "${container_pipewire_socket}.lock" &&  -f "${host_pipewired_socket}.lock" ]]; then
        ln -s "${host_pipewired_socket}.lock" "${container_pipewire_socket}.lock"
    fi
}

# Main functionality
run() {

    process_command_line_arguments "${@}"

    WAYLAND_DISPLAY=${WAYLAND_DISPLAY-"wayland-0"}
    PIPEWIRE_REMOTE=${PIPEWIRE_REMOTE-"pipewire-0"}

    try_mount_host_wayland
    try_mount_host_pipewire

    echo ""
}

run "${@}"
