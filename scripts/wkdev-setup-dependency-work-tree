#!/usr/bin/bash
application_path=${0}
application_name=$(basename ${application_path})
application_directory=$(cd "$(dirname "${application_path:-$PWD}")" 2>/dev/null 1>&2 && pwd)
sdk_directory=$(readlink -f "${application_directory}/..")
printf "${application_name}: Setup SDK dependencies build environment.\n"

# Verify pre-requisite: shyaml needs to be installed.
export PATH="$(python3 -m site --user-base)/bin:${PATH}"
if ! command -v shyaml > /dev/null; then
    printf "Cannot find 'shyaml' executable.\n"
    exit 1
fi

# Verify pre-requisite: git-buildpackage needs to be installed.
if ! command -v gbp > /dev/null; then
    printf "Cannot find 'gbp' executable.\n"
    exit 1
fi

# Package naming convention.
# Debian package number version format: [epoch:]upstream-version[-debian-revision]
# By convention, we always enforce the presence of a "debian-revision" suffix, that
# encodes the origin of the package and makes it easy to reason about the state of
# the SDK by only inspecting the list of installed packages (e.g. using 'dpkg -l').
#
# Summary: '${package_version_suffix}' indicates the suffix to use for .deb package names.
# +-----------------+--------------------------------------------------------------------+
# | debian-revision | Package origin                                                     |
# +-----------------+--------------------------------------------------------------------+
# | <any>           | System packages                                                    |
# | wkdevsdk        | Self-compiled package, during SDK image creation (on host!)        |
# | wkdevlocalsdk   | Self-compiled package, during SDK image _usage_ (in container!)    |
# +-----------------+--------------------------------------------------------------------+
package_version_suffix="wkdevsdk"
if [ -f "/run/.containerenv" ]; then
    package_version_suffix="wkdevlocalsdk"

    # Verify pre-requisite: aptly needs to be installed.
    if ! command -v aptly > /dev/null; then
        printf "Cannot find 'aptly' executable.\n"
        exit 1
    fi
fi

# Command line argument handling - defaults.
trace=0
verbose=0
work_directory=""
packages_directory=""
settings=""

apt_repository_name="wkdevsdk-packages"
apt_repository_source_list="/etc/apt/sources.list.d/${apt_repository_name}.list"
container_image_name="docker.io/nikolaszimmermann/wkdevsdk"
dependency_settings="${sdk_directory}/images/wkdev_sdk/custom_built_packages/wkdev-webkit-dependencies.yaml"
package_makefile_template="${sdk_directory}/images/wkdev_sdk/custom_built_packages/templates/Makefile.package.template"
group_makefile_template="${sdk_directory}/images/wkdev_sdk/custom_built_packages/templates/Makefile.group.template"
package_debian_branch="ubuntu/latest"
package_upstream_branch="upstream/latest"
package_distribution="kinetic"
package_component="main"
package_maintainer_name="Igalia"
package_maintainer_email="webkit-gtk@lists.webkit.org"

# Command line argument handling - help message.
show_help_message() {
    cat << EOF
<< Purpose >>

    Creates a work tree containing all WebKit dependencies, ready to hack.

<< Usage >>

    $ ${application_name} (options)?

    See below for a list of possible options.

    Example:

    $ ${application_name} --work-directory \${HOME}/wkdeps
    ...

<< Options >>

    -h / --help:        show this help message
    -t / --trace:       enable tracing for bash script
    -v / --verbose:     increase verbosity for ${application_name}

    -w / --work-directory:     path to work directory in which the new work tree will be setup
    -p / --packages-directory: path to packages directory in which resulting .(d)deb packages will be stored / queried for dependency resolving (default: <work-directory>/packages)
    -s / --settings:           path to settings file in YAML format (default: ${dependency_settings})
EOF
}

parse_command_line_arguments() {
    while :; do
        case ${1} in
            -h | --help)
                show_help_message
                exit 0
                ;;
            -t | --trace)
                trace=1
                shift
                ;;
            -v | --verbose)
                verbose=1
                shift
                ;;
            -w | --work-directory)
                if [ -n "${2}" ]; then
                    work_directory="${2}"
                    shift 2
                else
                    shift
                fi
                ;;
            -p | --packages-directory)
                if [ -n "${2}" ]; then
                    packages_directory="${2}"
                    shift 2
                else
                    shift
                fi
                ;;
            -s | --settings)
                if [ -n "${2}" ]; then
                    settings="${2}"
                    shift 2
                else
                    shift
                fi
                ;;
            -*)
                printf "Invalid option '${1}'.\n"
                show_help_message
                exit 1
                ;;
            *)
                break ;;
        esac
    done
}

handle_command_line_arguments() {
    # Bash scripting recommendations
    set -o errexit # Exit upon command failure
    set -o nounset # Warn about unset variables

    # Enable tracing, if desired.
    if [ ${trace} -eq 1 ]; then
        set -o xtrace
    fi

    if [ -z "${work_directory}" ]; then
        printf "You have to pass a work directory using the --work-directory option.\n"
        exit 1
    fi

    if [ ! -d "${work_directory}" ]; then
        printf "You have to pass a valid directory to the --work-directory option.\n"
        exit 1
    fi

    if [ -z "${packages_directory}" ]; then
        printf "You have to pass a packages directory using the --packages-directory option.\n"
        exit 1
    fi

    if [ ! -d "${packages_directory}" ]; then
        printf "You have to pass a valid directory to the --packages-directory option.\n"
        exit 1
    fi

    if [ -z "${settings}" ]; then
        settings="${dependency_settings}"
    fi

    if [ ! -f "${settings}" ]; then
        printf "Cannot parse settings file '${settings}', make sure it exists and is accesible.\n"
        exit 1
    fi
}

# Main functionality
run() {
    parse_command_line_arguments $@
    handle_command_line_arguments

    printf "\n-> Create work tree in '${work_directory}' directory...\n"
    mkdir -p "${work_directory}/sources" &>/dev/null
    mkdir -p "${work_directory}/builds" &>/dev/null

    if [ -f "/run/.containerenv" ]; then
        show_output=$(aptly repo show "${apt_repository_name}")
        if [ ${?} -ne 0 ]; then
            printf "\n-> Create local APT repository '${apt_repository_name}'...\n"
            aptly repo create -distribution="${package_distribution}" -component="${package_component}" "${apt_repository_name}"
        else
            printf "\n-> Reusing existing local APT repository '${apt_repository_name}'. Statistics:\n${show_output}\n"
        fi

        if [ ! -f "${apt_repository_source_list}" ]; then
            echo "deb [trusted=yes] file:///${apt_repository_name}/public/ ${package_distribution} ${package_component}" | sudo tee "${apt_repository_source_list}" >/dev/null
        fi
    else
        printf "\n-> Local APT repository creation disabled -- we are running on the host, not in the container where this is useful.\n"
    fi

    local package_groups=()
    local package_groups_count=$(cat ${settings} | shyaml --quiet get-length package_groups)
    for (( package_group_index=0; package_group_index<${package_groups_count}; package_group_index++ )); do
        local package_group_name=$(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.name)
        local package_group_entities_count=$(cat ${settings} | shyaml --quiet get-length package_groups.${package_group_index}.entities)
        package_groups+=("${package_group_name}")
        printf "\n-> Processing package group '${package_group_name}' containing ${package_group_entities_count} packages:\n"

        # Create package group directories
        mkdir -p "${work_directory}/sources/${package_group_name}" &>/dev/null
        mkdir -p "${work_directory}/builds/${package_group_name}" &>/dev/null

        local packages_in_group=()
        for (( package_group_entity_index=0; package_group_entity_index<${package_group_entities_count}; package_group_entity_index++ )); do
            local package_name=$(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.name)
            packages_in_group+=("${package_name}")

            local package_url=$(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.url)
            local dget_options=($(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.options.dget))
            local gbp_import_dsc_options=($(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.options.gbp_import_dsc))
            local deb_build_options=($(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.options.deb_build))
            local dpkg_buildpackage_options=($(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.options.dpkg_buildpackage))

            local dependencies_count=$(cat ${settings} | shyaml --quiet get-length package_groups.${package_group_index}.entities.${package_group_entity_index}.depends_on)
            if [ -z "${dependencies_count}" ]; then
                dependencies_count=0
            fi

            local system_dependencies_count=$(cat ${settings} | shyaml --quiet get-length package_groups.${package_group_index}.entities.${package_group_entity_index}.required_system_packages)
            if [ -z "${system_dependencies_count}" ]; then
                system_dependencies_count=0
            fi

            # Create package source directory
            printf "\n  -> Processing package '${package_name}' with URL ${package_url}:\n"
            mkdir -p "${work_directory}/sources/${package_group_name}/${package_name}" &>/dev/null
            pushd "${work_directory}/sources/${package_group_name}/${package_name}" &>/dev/null

            # Download DSC file
            printf "\n    -> Downloading DSC file from URL '${package_url}' (dget options: '${dget_options[@]}')...\n"
            if [ ${verbose} -eq 0 ]; then
                dget ${dget_options[@]} --quiet --download-only "${package_url}" &>/dev/null
            else
                dget ${dget_options[@]} --download-only "${package_url}"
            fi

            # Change epoch to a fixed value of ${package_epoch}, to indicate our packages.
            dsc_file=$(ls -1 *${package_name}*.dsc | head --lines 1)
            orig_tarball=$(ls -1 ${package_name}*.orig.* | head --lines 1)

            # Create a local git repository to manage the package + patches on top
            printf "\n    -> Importing package in local Git repository (gbp import-dsc options: '${gbp_import_dsc_options[@]}')...\n"
            if [ ${verbose} -eq 0 ]; then
                gbp import-dsc ${gbp_import_dsc_options[@]} --debian-branch="${package_debian_branch}" --upstream-branch="${package_upstream_branch}" "${dsc_file}" &>/dev/null
            else
                gbp import-dsc ${gbp_import_dsc_options[@]} --debian-branch="${package_debian_branch}" --upstream-branch="${package_upstream_branch}" "${dsc_file}"
            fi

            # Create pristine-tar branch
            package_git_directory=$(find . -type d -name "*${package_name}*" | head --lines 1)
            pushd "${package_git_directory}" &>/dev/null

            # Override debian revision in package version string
            printf "\n    -> Incrementing local package version and appending '${package_version_suffix}' suffix to package name...\n"
            if [ ${verbose} -eq 0 ]; then
                DEBFULLNAME="${package_maintainer_name}" DEBEMAIL="${package_maintainer_email}" gbp dch --local="${package_version_suffix}" --distribution="${package_distribution}" --debian-branch="${package_debian_branch}" &>/dev/null
                DEBFULLNAME="${package_maintainer_name}" DEBEMAIL="${package_maintainer_email}" gbp dch --nmu --distribution="${package_distribution}" --debian-branch="${package_debian_branch}" --commit &>/dev/null
            else
                DEBFULLNAME="${package_maintainer_name}" DEBEMAIL="${package_maintainer_email}" gbp dch --local="${package_version_suffix}" --distribution="${package_distribution}" --debian-branch="${package_debian_branch}"
                DEBFULLNAME="${package_maintainer_name}" DEBEMAIL="${package_maintainer_email}" gbp dch --nmu --distribution="${package_distribution}" --debian-branch="${package_debian_branch}" --commit
            fi

            printf "\n    -> Create 'pristine-tar' branch for upstream branch '${package_upstream_branch}' and orig tarball '${orig_tarball}'...\n"
            if [ ${verbose} -eq 0 ]; then
                gbp pristine-tar commit --upstream-tag="${package_upstream_branch}" "../${orig_tarball}" &>/dev/null
            else
                gbp pristine-tar commit --upstream-tag="${package_upstream_branch}" "../${orig_tarball}"
            fi

            popd &>/dev/null

            # Create directories for result files and dependency packages
            local result_directory="${work_directory}/builds/${package_group_name}/${package_name}"
            mkdir -p "${result_directory}"

            local dependencies_file="${result_directory}/.dependencies"
            touch "${dependencies_file}" &>/dev/null

            # Handle 'depends_on' field to depend on all build artifacts (.deb/.ddeb) files of a previously built package.
            if [ ${dependencies_count} -gt 0 ]; then
                for (( dependency_index=0; dependency_index<${dependencies_count}; dependency_index++ )); do
                    local dependency_package_name=($(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.depends_on.${dependency_index}))
                    printf "    -> Mark this package depending on the expression '${dependency_package_name}' provided by earlier builds.\n"

                    echo "${dependency_package_name}" >> "${dependencies_file}"
                done
            fi

            # Handle 'required_system_packages' field to depend on system packages.
            if [ ${system_dependencies_count} -gt 0 ]; then
                for (( system_dependency_index=0; system_dependency_index<${system_dependencies_count}; system_dependency_index++ )); do
                    local system_dependency_package_name=($(cat ${settings} | shyaml --quiet get-value package_groups.${package_group_index}.entities.${package_group_entity_index}.required_system_packages.${system_dependency_index}))
                    echo "    -> Mark this package depending on the system package '${system_dependency_package_name}' provided in the distribution repositories."

                    echo "${system_dependency_package_name}" >> "${dependencies_file}"
                done
            fi

            printf "    -> Generating Makefile for package '${package_name}' in '${result_directory}/Makefile'...\n"
            cat "${package_makefile_template}" | apt_repository_name="${apt_repository_name}" deb_build_options="${deb_build_options[@]}" dpkg_buildpackage_options="${dpkg_buildpackage_options[@]}" sdk_directory="${sdk_directory}" work_directory="${work_directory}" package_full_name="${package_group_name}/${package_name}" packages_directory="${packages_directory}" envsubst '${apt_repository_name},${deb_build_options},${dpkg_buildpackage_options},${sdk_directory},${work_directory},${package_full_name},${packages_directory}'> "${result_directory}"/Makefile
            popd &>/dev/null
        done

        local result_directory="${work_directory}/builds/${package_group_name}"
        printf "\n-> Generating Makefile for package group '${package_group_name}' in '${result_directory}/Makefile'...\n"
        cat "${group_makefile_template}" | apt_repository_name="${apt_repository_name}" packages="${packages_in_group[@]}" packages_directory="${packages_directory}" envsubst '${apt_repository_name},${packages},${packages_directory}'> "${result_directory}"/Makefile
    done

    local result_directory="${work_directory}/builds"
    printf "\n-> Generating Makefile for all package groups in '${result_directory}/Makefile'...\n"
    printf "   NOTE: Use 'make' / 'make install' in '${result_directory}' to compile/install all packages in all package groups or descend into a specific package group or single package to build exactly what's needed for the current task.\n"
    cat "${group_makefile_template}" | apt_repository_name="${apt_repository_name}" packages="${package_groups[@]}" packages_directory="${packages_directory}" envsubst '${apt_repository_name},${packages},${packages_directory}' > "${result_directory}"/Makefile

    printf "\n-> Finished.\n"
    printf "NOTE: Remember to 'make repo-publish' once before installing one or multiple packages using 'make install'.\n"
}

run ${@}
