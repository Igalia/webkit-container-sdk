#!/usr/bin/bash

application_path=${0}
application_name=$(basename ${application_path})
application_directory=$(cd "$(dirname "${application_path:-$PWD}")" 2>/dev/null 1>&2 && pwd)
sdk_directory=$(readlink -f "${application_directory}/../../")
printf "${application_name}: Build SDK.\n"

# Prevent to run this script from the container
if [ -f /run/.containerenv ]; then
    printf "\nThe script '${application_name}' is not intended to run from within the container.\n"
    exit 1
fi

# Verify pre-requisite: podman needs to be installed.
if ! command -v podman > /dev/null; then
    printf "\nCannot find podman executable.\n"
    exit 1
fi

# Command line argument handling - defaults.
trace=0
verbose=0

show_help_message() {
    cat << EOF
<< Purpose >>

    Builds all necessary container images & software packages forming the 'wkdev-sdk' SDK.

<< Usage >>

    $ ${application_name} (options)?

    See below for a list of possible options.

    Example:

    $ ${application_name} --verbose
    ...

<< Options >>

    -h / --help:        show this help message
    -t / --trace:       enable tracing for bash script
    -v / --verbose:     increase verbosity for ${application_name}
EOF
}

parse_command_line_arguments() {
    while :; do
        case ${1} in
            -h | --help)
                show_help_message
                exit 0
                ;;
            -t | --trace)
                trace=1
                shift
                ;;
            -v | --verbose)
                verbose=1
                shift
                ;;
            -*)
                printf "Invalid option '${1}'.\n"
                show_help_message
                exit 1
                ;;
            *)
                break ;;
        esac
    done
}

handle_command_line_arguments() {
    # Bash scripting recommendations
    set -o errexit # Exit upon command failure
    set -o nounset # Warn about unset variables

    # Enable tracing, if desired.
    if [ ${trace} -eq 1 ]; then
        set -o xtrace
    fi
}

# Helper functions
build_container_image() {
    local image_flavour=${1}

    printf "\n-> Building '${image_flavour}' container image...\n"
    if [ ${verbose} -eq 1 ]; then
        printf "   Build log:\n"
        ${sdk_directory}/images/${image_flavour}/build-image.sh
    else
        ${sdk_directory}/images/${image_flavour}/build-image.sh &>/dev/null
    fi
}

build_packages_defined_in_yaml() {
    local packages_flavour="${1}"
    local build_done_file="${sdk_directory}/.build-done_${packages_flavour}"
    if [ ! -f "${build_done_file}" ]; then
        printf "\n-> Building packages denoted in '${packages_flavour}.yaml' configuration for inclusion in 'wkdev-sdk' image...\n"

        temporary_directory=$(mktemp --tmpdir --directory wkdevsdk.XXXXXXXXXX)
        pushd "${temporary_directory}" &>/dev/null

        local extra_options=()
        if [ ${verbose} -ne 0 ]; then
            extra_options+=("--verbose")
        fi

        if [ ${trace} -ne 0 ]; then
            extra_options+=("--trace")
        fi

        ${sdk_directory}/scripts/wkdev-setup-dependency-work-tree \
            --settings "${sdk_directory}/images/wkdev_sdk/custom_built_packages/${packages_flavour}.yaml" \
            --work-directory "${PWD}" \
            --packages-directory "${sdk_directory}/images/wkdev_sdk/custom_built_packages/${packages_flavour}" ${extra_options[@]}

        cd builds

        make
        exit_code=${?}

        if [ ${exit_code} -ne 0 ]; then
            printf "\n-> Build failed with exit code ${?}. Please inspect the build work directory '${temporary_directory}' and remove it manually.\n"
            exit ${exit_code}
        fi

        touch "${build_done_file}"
        popd &>/dev/null
        rm -rf "${temporary_directory}" &>/dev/null
    else
        printf "\n-> Skipping building packages denoted in '${packages_flavour}.yaml' configuration. (To force rebuilding, remove '${build_done_file}').\n"
    fi
}

# Main functionality
run() {
    parse_command_line_arguments ${@}
    handle_command_line_arguments

    # 1) Build wkdev_package_proxy container image
    build_container_image "wkdev_package_proxy"

    # 2) Build wkdev_package_builder container image
    build_container_image "wkdev_package_builder"

    # 3) Build podman4 & friends for Ubuntu 22.10
    build_packages_defined_in_yaml "wkdev-podman4-ubuntu-kinetic"

    # 4) Build WebKit dependencies (libjpegxl, gstreamer, ...)
    build_packages_defined_in_yaml "wkdev-webkit-dependencies"

    # 5) Build wkdev-sdk container image
    build_container_image "wkdev_sdk"

    printf "\n-> Finished!\n"
}

run ${@}
