#!/usr/bin/env bash

[ -f "${WKDEV_SDK}/.wkdev-sdk-root" ] && source "${WKDEV_SDK}/utilities/application.sh" || { echo "Please set \${WKDEV_SDK} to point to the root of the wkdev-sdk checkout."; exit 1; }
init_application "${0}" "Build the WebKit software development kit (SDK)." host-only

# Source utility script fragments
source "${WKDEV_SDK}/utilities/podman.sh"

argsparse_use_option debug        "Enable debug mode for this script"
argsparse_use_option trace        "Enable 'xtrace' mode for this script"
argsparse_use_option =verbose     "Increase verbosity of this script"
argsparse_use_option =image:      "Which image to build (wkdev_sdk or ci_runner)" default:wkdev_sdk

argsparse_use_option =mode:       "Operation mode: 'build', 'deploy', or 'export'" mandatory

argsparse_usage_description="$(cat <<EOF
<< Purpose >>

    Builds all necessary container images & software packages forming the 'wkdev-sdk' SDK.

<< Examples >>

    $ ${application_name} --mode build
    $ ${application_name} --mode deploy
EOF
)"

process_command_line_arguments() {

    argsparse_parse_options "${@}"
    argsparse_is_option_set "trace" && set -o xtrace

    operation_mode="${program_options["mode"]}"
    [ "${operation_mode}" != 'build' ] && [ "${operation_mode}" != 'deploy' ] && [ "${operation_mode}" != 'export' ] && _abort_ "Unknown operation mode: '${operation_mode}' (valid choices are 'build', 'deploy', or 'export')"
}

process_container_image() {

    echo ""

    local container_image_name="${1}"
    echo "-> Building '${container_image_name}' container image..."

    local extra_options=()
    argsparse_is_option_set "debug" && extra_options+=("--debug")
    argsparse_is_option_set "verbose" && extra_options+=("--verbose")
    argsparse_is_option_set "trace" && extra_options+=("--trace")

    "${WKDEV_SDK}/scripts/host-only/wkdev-sdk-container-bakery" --mode "${operation_mode}" --name "${container_image_name}" ${extra_options[@]} || _abort_ "Image build failed"
}

# Main functionality
run() {

    process_command_line_arguments "${@}"
    local image_arg="${program_options["image"]}"
    local image_name

    if [ "${image_arg}" = "wkdev_sdk" ]; then
        image_name="$(get_sdk_image_name)"
    elif [ "${image_arg}" = "ci_runner" ]; then
        image_name="$(get_ci_runner_image_name)"
    else
        _abort_ "Unknown image: '${image}' (valid choices are 'wkdev_sdk' or 'ci_runner')"
    fi

    # Build or deploy main SDK container image.
    process_container_image "${image_name}"

    echo ""
    echo "-> Finished!"
}

run "${@}"
